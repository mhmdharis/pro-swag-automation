// src/app/api/replace-dummy/route.ts
import { NextResponse } from "next/server";

export async function POST(req: Request) {
  try {
    const body = await req.json();
    const { orderId, lineItems } = body;

    console.log("lineItems count:", lineItems.length);

    const shopifyFetch = async (query: string, variables: any) => {
      const res = await fetch(
        `https://${process.env.SHOPIFY_SHOP}/admin/api/2025-01/graphql.json`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            "X-Shopify-Access-Token": process.env.SHOPIFY_ADMIN_API_TOKEN!,
          },
          body: JSON.stringify({ query, variables }),
        }
      );
      return res.json();
    };

    // 1. Begin edit
    const beginRes = await shopifyFetch(
      `
      mutation orderEditBegin($id: ID!) {
        orderEditBegin(id: $id) {
          calculatedOrder { id }
          userErrors { field message }
        }
      }
      `,
      { id: orderId }
    );

    const calculatedOrderId =
      beginRes.data?.orderEditBegin?.calculatedOrder?.id;
    if (!calculatedOrderId) {
      console.error("Failed to begin edit:", beginRes);
      return NextResponse.json({ error: "Failed to begin edit" }, { status: 500 });
    }

    // 2. Fetch calculated order line items to map original → calculated IDs
    const calcLineItemsRes = await shopifyFetch(
      `
      query($id: ID!) {
        calculatedOrder(id: $id) {
          lineItems(first: 50) {
            edges {
              node {
                id
                originalLineItem { id }
              }
            }
          }
        }
      }`,
      { id: calculatedOrderId }
    );

    const lineItemMap: Record<string, string> = {};
    calcLineItemsRes.data?.calculatedOrder?.lineItems?.edges.forEach((edge: any) => {
      const calcId = edge.node.id;
      const origId = edge.node.originalLineItem?.id;
      if (origId) {
        lineItemMap[origId] = calcId;
      }
    });

    console.log("LineItemMap:", lineItemMap);

    // 3. Process each line item
    for (let i = 0; i < lineItems.length; i++) {
      const item = lineItems[i];
      console.log(`--- LineItem ${i} ---`);
      console.log("original id:", item.id);

      const calcLineItemId = lineItemMap[item.id];
      if (!calcLineItemId) {
        console.warn("No calculatedLineItemId found for", item.id);
        continue;
      }
      console.log("calculatedLineItemId:", calcLineItemId);

      const parts = item.sku.split(",");
      const tags = parts.map((p: string) => p.trim());
      const size = item.size;
      const tagCandidate = tags.find((t: string) => t.endsWith("-SIZE"));

      if (!tagCandidate) continue;

      const resolvedSku = tagCandidate.replace("SIZE", size);
      console.log("resolved SKU:", resolvedSku);

      // 3a. Look up variant
      const variantRes = await shopifyFetch(
        `
        query($query: String!) {
          productVariants(first: 1, query: $query) {
            edges {
              node {
                id
                sku
                title
                product { title }
              }
            }
          }
        }
        `,
        { query: `sku:${resolvedSku}` }
      );

      const variant =
        variantRes.data?.productVariants?.edges?.[0]?.node;
      if (!variant) {
        console.error("No variant found for", resolvedSku);
        continue;
      }
      const variantId = variant.id;

      // 3b. Remove dummy (set qty = 0)
      const removeRes = await shopifyFetch(
        `
        mutation orderEditSetQuantity($calculatedOrderId: ID!, $lineItemId: ID!, $quantity: Int!) {
          orderEditSetQuantity(id: $calculatedOrderId, lineItemId: $lineItemId, quantity: $quantity) {
            calculatedOrder { id }
            userErrors { field message }
          }
        }
        `,
        {
          calculatedOrderId,
          lineItemId: calcLineItemId, // ✅ use calculatedLineItemId
          quantity: 0,
        }
      );
      console.log("orderEditSetQuantity response:", JSON.stringify(removeRes, null, 2));

      // 3c. Add correct variant
      const addRes = await shopifyFetch(
        `
        mutation orderEditAddVariant($calculatedOrderId: ID!, $variantId: ID!, $quantity: Int!) {
          orderEditAddVariant(id: $calculatedOrderId, variantId: $variantId, quantity: $quantity) {
            calculatedOrder {
              id
              addedLineItems(first: 5) {
                edges {
                  node {
                    id
                    variant { id title sku }
                    quantity
                  }
                }
              }
            }
            userErrors { field message }
          }
        }
        `,
        {
          calculatedOrderId,
          variantId,
          quantity: item.quantity || 1,
        }
      );
      console.log("orderEditAddVariant response:", JSON.stringify(addRes, null, 2));
    }

    // 4. Commit edit
    const commitRes = await shopifyFetch(
      `
      mutation orderEditCommit($calculatedOrderId: ID!) {
        orderEditCommit(id: $calculatedOrderId) {
          order {
            id
            name
            lineItems(first: 10) {
              edges { node { id title quantity } }
            }
          }
          userErrors { field message }
        }
      }
      `,
      { calculatedOrderId }
    );
    console.log("orderEditCommit response:", JSON.stringify(commitRes, null, 2));

    return NextResponse.json({ success: true, commitRes });
  } catch (err) {
    console.error("Error in /api/replace-dummy:", err);
    return NextResponse.json({ error: (err as Error).message }, { status: 500 });
  }
}